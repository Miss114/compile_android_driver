name: Android Kernel Driver Builder

on:
  workflow_dispatch:
    inputs:
      android_version:
        description: 'Android Version (Kernel) (e.g., 14)'
        required: true
      kernel_version:
        description: 'Kernel Version (e.g., 6.1)'
        required: true
      driver_name:
        description: 'Driver Module Name (e.g., mydriver.ko)'
        required: true
      target_arch:
        description: 'Target Architecture (aarch64, x86_64, etc.)'
        required: true
        default: 'aarch64'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # 仅缓存符号文件的分支（不含完整源码）
      SYMBOLS_BRANCH: kernel-symbols-${{ github.event.inputs.android_version }}-${{ github.event.inputs.kernel_version }}-${{ github.event.inputs.target_arch }}
      KERNEL_DIR: android-kernel
      # 符号文件路径（用于模块编译依赖）
      SYMBOLS_PATH: kernel-symbols
      # 目标模块名称
      TARGET_MODULE: ${{ github.event.inputs.driver_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.email "1917767839@qq.com"
          git config --global user.name "Miss"
          git lfs install  # 用于处理大型符号文件

      - name: Prepare symbols branch
        run: |
          # 创建或切换符号缓存分支
          if ! git rev-parse --verify origin/${{ env.SYMBOLS_BRANCH }}; then
            git checkout -b ${{ env.SYMBOLS_BRANCH }}
            git commit --allow-empty -m "Init kernel symbols branch"
            git push -u origin ${{ env.SYMBOLS_BRANCH }}
          else
            git checkout ${{ env.SYMBOLS_BRANCH }}
            git pull origin ${{ env.SYMBOLS_BRANCH }} --rebase --autostash
          fi
          # 恢复主分支代码
          git checkout main -- .
          # 创建符号文件存储目录
          mkdir -p ${{ env.SYMBOLS_PATH }}

      - name: Check symbols cache
        id: symbols_check
        run: |
          # 检查关键符号文件是否存在（用于模块编译）
          if [ -f "${{ env.SYMBOLS_PATH }}/Module.symvers" ] && [ -f "${{ env.SYMBOLS_PATH }}/.config" ]; then
            echo "symbols_cached=true" >> $GITHUB_OUTPUT
          else
            echo "symbols_cached=false" >> $GITHUB_OUTPUT
          fi

      - name: Prepare kerneldriver directory
        run: |
          mkdir -p kerneldriver
          if [ -z "$(ls -A ./code/ 2>/dev/null)" ]; then
            echo "Error: No driver source files found in code directory"
            exit 1
          fi
          mv ./code/*.h ./code/*.c ./code/Makefile kerneldriver/

      - name: Install repo tool
        if: steps.symbols_check.outputs.symbols_cached == 'false'
        run: |
          sudo curl -L https://storage.googleapis.com/git-repo-downloads/repo -o /usr/local/bin/repo
          sudo chmod a+x /usr/local/bin/repo

      - name: Fetch kernel source (first run only)
        if: steps.symbols_check.outputs.symbols_cached == 'false'
        run: |
          mkdir -p ${{ env.KERNEL_DIR }} && cd ${{ env.KERNEL_DIR }}
          repo init -u https://android.googlesource.com/kernel/manifest -b common-android${{ github.event.inputs.android_version }}-${{ github.event.inputs.kernel_version }}
          repo sync -j4 -c --no-tags --optimized-fetch --force-sync  # 低并行避免网络问题

      - name: Copy driver to source
        run: |
          # 若首次运行，使用新拉取的源码；否则使用临时目录
          if [ "${{ steps.symbols_check.outputs.symbols_cached }}" = "false" ]; then
            cp -r kerneldriver ${{ env.KERNEL_DIR }}/common/drivers/
          else
            mkdir -p temp-kernel/common/drivers
            cp -r kerneldriver temp-kernel/common/drivers/
            # 复制缓存的符号文件到临时目录
            cp -r ${{ env.SYMBOLS_PATH }}/* temp-kernel/
          fi

      - name: Modify build configs
        run: |
          # 根据是否有缓存选择目录
          if [ "${{ steps.symbols_check.outputs.symbols_cached }}" = "false" ]; then
            KERNEL_SRC_DIR="${{ env.KERNEL_DIR }}/common"
          else
            KERNEL_SRC_DIR="temp-kernel"
          fi
          
          # 修改Makefile添加驱动
          if ! grep -q "obj-y += kerneldriver/" $KERNEL_SRC_DIR/drivers/Makefile; then
            echo "obj-y += kerneldriver/" >> $KERNEL_SRC_DIR/drivers/Makefile
          fi
          
          # 添加到GKI模块列表
          if [ ${{ github.event.inputs.android_version }} -gt 13 ]; then
            MODULE_ENTRY="drivers/kerneldriver/${{ env.TARGET_MODULE }}"
            awk -i inplace -v module="$MODULE_ENTRY" '
              BEGIN { added=0 }
              /_COMMON_GKI_MODULES_LIST = \[/ { in_list=1 }
              in_list && /\]/ {
                if (!added) { print "    \"" module "\","; added=1 }
                in_list=0
              }
              in_list && !added { if (module < $0) { print "    \"" module "\","; added=1 } }
              { print }
            ' $KERNEL_SRC_DIR/modules.bzl
          else
            echo "drivers/kerneldriver/${{ env.TARGET_MODULE }}" >> $KERNEL_SRC_DIR/android/gki_${{ github.event.inputs.target_arch }}_modules
          fi

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential flex bison libssl-dev libelf-dev bc python-is-python3

      - name: Build kernel (first run) and module
        run: |
          export ARCH=${{ github.event.inputs.target_arch }}
          # 首次运行：全量编译内核并提取符号文件；后续：仅编译模块
          if [ "${{ steps.symbols_check.outputs.symbols_cached }}" = "false" ]; then
            cd ${{ env.KERNEL_DIR }}
            if [ ${{ github.event.inputs.android_version }} -le 12 ]; then
              BUILD_CONFIG=common/build.config.gki.${{ github.event.inputs.target_arch }} LTO=thin build/build.sh -j$(nproc)
              OUTPUT_DIR="out/android${{ github.event.inputs.android_version }}-${{ github.event.inputs.kernel_version }}/dist"
            else
              tools/bazel run --local_cpu_resources=50 --local_ram_resources=6144 //common:kernel_${{ github.event.inputs.target_arch }}_dist
              OUTPUT_DIR="out/kernel_${{ github.event.inputs.target_arch }}"
            fi
            # 提取符号文件（供后续模块编译）
            cp $OUTPUT_DIR/Module.symvers $OUTPUT_DIR/.config $OUTPUT_DIR/vmlinux ${{ env.SYMBOLS_PATH }}/
          else
            cd temp-kernel
            # 使用缓存的符号文件编译模块
            make -j$(nproc) modules
            OUTPUT_DIR="."  # 临时目录直接输出
          fi
          # 记录模块输出路径
          echo "MODULE_OUTPUT_DIR=$OUTPUT_DIR" >> $GITHUB_ENV

      - name: Cache kernel symbols (first run only)
        if: steps.symbols_check.outputs.symbols_cached == 'false'
        run: |
          git checkout ${{ env.SYMBOLS_BRANCH }}
          # 仅缓存符号文件（不包含完整源码）
          git lfs track "${{ env.SYMBOLS_PATH }}/*"
          git add .gitattributes
          git add ${{ env.SYMBOLS_PATH }}
          git commit -m "Cache symbols for Android ${{ github.event.inputs.android_version }} kernel ${{ github.event.inputs.kernel_version }}"
          git push -u origin ${{ env.SYMBOLS_BRANCH }} --compress=9

      - name: Upload only target .ko module
        uses: actions/upload-artifact@v4.6.2
        with:
          name: target-driver-${{ github.event.inputs.target_arch }}
          path: |
            ${{ env.MODULE_OUTPUT_DIR }}/${{ env.TARGET_MODULE }}
            # 确保只包含目标模块，排除其他文件
            !${{ env.MODULE_OUTPUT_DIR }}/*.img
            !${{ env.MODULE_OUTPUT_DIR }}/Image
            !${{ env.MODULE_OUTPUT_DIR }}/vmlinux
