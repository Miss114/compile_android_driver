name: Android 12 Kernel 5.10 Driver Builder

on:
  workflow_dispatch:
    inputs:
      driver_name:
        description: 'Driver Module Name (e.g., mydriver.ko)'
        required: true
      target_arch:
        description: 'Target Architecture (仅支持 aarch64)'
        required: true
        default: 'aarch64'
        options:
          - 'aarch64'  # Android 12 5.10 主力架构

jobs:
  build:
    runs-on: ubuntu-20.04  # 兼容 Android 12 编译工具链（避免新版系统兼容问题）
    env:
      CACHE_BRANCH: android12-5.10-cache  # 专用缓存分支
      KERNEL_DIR: android-kernel
      ANDROID_VERSION: 12
      KERNEL_VERSION: 5.10
      # 固定 5.10 源码分支（Android 12 对应分支）
      KERNEL_MANIFEST_BRANCH: common-android12-5.10

    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: 恢复缓存（内核源码 + 编译工具）
        run: |
          # 切换到专用缓存分支
          if ! git rev-parse --verify ${{ env.CACHE_BRANCH }}; then
            git checkout -b ${{ env.CACHE_BRANCH }}
            git commit --allow-empty -m "Init Android 12 5.10 cache"
            git push -u origin ${{ env.CACHE_BRANCH }}
          else
            git checkout ${{ env.CACHE_BRANCH }}
          fi
          # 复制缓存到工作区（保留主分支代码）
          git checkout main -- .
          rsync -a --ignore-existing ./ ${{ github.workspace }}/

      - name: 检查缓存状态
        run: |
          # 验证内核源码是否完整（5.10 关键文件）
          if [ -d "${{ env.KERNEL_DIR }}/.repo" ] && [ -f "${{ env.KERNEL_DIR }}/common/Makefile" ] && grep -q "5.10" "${{ env.KERNEL_DIR }}/common/Makefile"; then
            echo "KERNEL_EXISTS=true" >> $GITHUB_ENV
          else
            echo "KERNEL_EXISTS=false" >> $GITHUB_ENV
          fi
          # 验证交叉编译器是否存在（Android 12 5.10 专用路径）
          if [ -d "${{ env.KERNEL_DIR }}/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9" ]; then
            echo "TOOLCHAIN_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TOOLCHAIN_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: 安装 repo 工具（若缺失）
        if: env.KERNEL_EXISTS == 'false'
        run: |
          sudo curl -L https://storage.googleapis.com/git-repo-downloads/repo -o /usr/local/bin/repo
          sudo chmod a+x /usr/local/bin/repo

      - name: 拉取 Android 12 5.10 内核源码（若缺失）
        if: env.KERNEL_EXISTS == 'false'
        run: |
          mkdir -p ${{ env.KERNEL_DIR }} && cd ${{ env.KERNEL_DIR }}
          # 强制使用清华镜像加速（解决谷歌仓库访问问题）
          repo init -u https://mirrors.tuna.tsinghua.edu.cn/git/AOSP/kernel/manifest -b ${{ env.KERNEL_MANIFEST_BRANCH }}
          # 同步时忽略标签，仅拉取必要代码（加速）
          repo sync -j$(nproc) -c --no-tags --optimized-fetch --force-sync

      - name: 准备驱动代码
        run: |
          mkdir -p kerneldriver
          # 确保驱动代码存在（容错处理）
          if [ -z "$(ls -A ./code/ 2>/dev/null)" ]; then
            echo "错误：code 目录下未找到驱动源码（.h/.c/Makefile）"
            exit 1
          fi
          mv ./code/*.h ./code/*.c ./code/Makefile kerneldriver/
          cp -r kerneldriver ${{ env.KERNEL_DIR }}/common/drivers/

      - name: 修改驱动编译配置（Android 12 专用）
        run: |
          cd ${{ env.KERNEL_DIR }}
          # 向 drivers/Makefile 添加驱动目录（避免重复）
          if ! grep -q "obj-y += kerneldriver/" common/drivers/Makefile; then
            echo "obj-y += kerneldriver/" >> common/drivers/Makefile
          fi
          # Android 12 无需修改 modules.bzl，仅需添加到 GKI 模块列表
          MODULE_ENTRY="drivers/kerneldriver/${{ github.event.inputs.driver_name }}"
          if ! grep -q "$MODULE_ENTRY" common/android/gki_${{ github.event.inputs.target_arch }}_modules; then
            echo "$MODULE_ENTRY" >> common/android/gki_${{ github.event.inputs.target_arch }}_modules
          fi

      - name: 调整编译参数（适配 5.10 内核）
        run: |
          cd ${{ env.KERNEL_DIR }}
          # 5.10 内核对栈帧大小限制较严格，强制放宽
          find . -type f -name "Makefile*" -exec sed -i 's/-Wframe-larger-than=1024/-Wframe-larger-than=4096/g' {} +
          # 禁用 LTO 优化（避免 5.10 版本编译错误）
          echo "CONFIG_LTO=n" >> common/.config

      - name: 安装系统依赖（Android 12 专用）
        run: |
          sudo apt-get update
          # 5.10 内核编译依赖特定版本工具，固定版本避免冲突
          sudo apt-get install -y \
            build-essential=12.8ubuntu1.1 \
            flex=2.6.4-6.2 \
            bison=2:3.5.1+dfsg-1 \
            libssl1.1=1.1.1f-1ubuntu2.20 \
            libelf-dev=0.176-1.1build1 \
            bc=1.07.1-2build1 \
            python-is-python3=3.8.2-4

      - name: 编译内核（首次全量编译，后续增量编译）
        run: |
          cd ${{ env.KERNEL_DIR }}
          export ARCH=${{ github.event.inputs.target_arch }}
          export CROSS_COMPILE=${{ env.KERNEL_DIR }}/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin/aarch64-linux-android-
          
          if [ "${{ env.KERNEL_EXISTS }}" = "false" ]; then
            echo "首次编译：全量构建内核"
            BUILD_CONFIG=common/build.config.gki.${{ github.event.inputs.target_arch }} \
            LTO=none \
            build/build.sh -j$(nproc)
          else
            echo "增量编译：仅构建驱动模块"
            BUILD_CONFIG=common/build.config.gki.${{ github.event.inputs.target_arch }} \
            LTO=none \
            build/build.sh -j$(nproc) modules
          fi
          # 固定输出路径（Android 12 5.10 编译产物位置）
          echo "OUTPUT_PATH=out/android12-5.10/dist" >> $GITHUB_ENV

      - name: 更新缓存（仅保留必要文件）
        run: |
          git checkout ${{ env.CACHE_BRANCH }}
          # 仅缓存源码和工具链，排除临时文件（减少体积）
          rsync -a --exclude="out/" --exclude=".repo/projects/*/.git" \
            ${{ github.workspace }}/ ./
          # 大文件用 Git LFS 处理（5.10 内核镜像通常 >100MB）
          git lfs install
          find ${{ env.KERNEL_DIR }} -size +100M -name "Image" -o -name "vmlinux" -exec git lfs track {} +
          # 提交缓存
          git add .
          git commit -m "Update Android 12 5.10 cache: $(date)"
          git push -u origin ${{ env.CACHE_BRANCH }}

      - name: 上传编译产物
        uses: actions/upload-artifact@v4.6.2
        with:
          name: android12-5.10-driver-${{ github.event.inputs.target_arch }}
          path: |
            ${{ env.KERNEL_DIR }}/${{ env.OUTPUT_PATH }}/*.ko
            ${{ env.KERNEL_DIR }}/${{ env.OUTPUT_PATH }}/Image
