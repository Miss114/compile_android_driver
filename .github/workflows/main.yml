name: Android Kernel Driver Builder

on:
  workflow_dispatch:
    inputs:
      android_version:
        description: 'Android Version (Kernel) (e.g., 14)'
        required: true
      kernel_version:
        description: 'Kernel Version (e.g., 6.1)'
        required: true
      driver_name:
        description: 'Driver Module Name (e.g., mydriver.ko)'
        required: true
      target_arch:
        description: 'Target Architecture (aarch64, x86_64, etc.)'
        required: true
        default: 'aarch64'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # 缓存文件相关配置
      CACHE_ARCHIVE: kernel-build-cache-${{ github.event.inputs.android_version }}-${{ github.event.inputs.kernel_version }}-${{ github.event.inputs.target_arch }}.tar.gz
      CACHE_DIR: .kernel_cache
      KERNEL_DIR: android-kernel

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        
      - name: Check for existing build cache
        id: cache_check
        run: |
          if [ -f "${{ env.CACHE_ARCHIVE }}" ]; then
            echo "cache_exists=true" >> $GITHUB_OUTPUT
          else
            echo "cache_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Extract build cache (if exists)
        if: steps.cache_check.outputs.cache_exists == 'true'
        run: |
          mkdir -p ${{ env.KERNEL_DIR }}
          tar -zxf ${{ env.CACHE_ARCHIVE }} -C ${{ env.KERNEL_DIR }}

      - name: Prepare kerneldriver directory
        run: |
          mkdir kerneldriver
          mv ./code/*.h ./code/*.c ./code/Makefile kerneldriver/
          
      - name: Install repo tool (if no cache)
        if: steps.cache_check.outputs.cache_exists == 'false'
        run: |
          sudo curl -L https://storage.googleapis.com/git-repo-downloads/repo -o /usr/local/bin/repo
          sudo chmod a+x /usr/local/bin/repo

      - name: Set up Android Kernel source (if no cache)
        if: steps.cache_check.outputs.cache_exists == 'false'
        run: |
          mkdir -p ${{ env.KERNEL_DIR }} && cd ${{ env.KERNEL_DIR }}
          repo init -u https://android.googlesource.com/kernel/manifest -b common-android${{ github.event.inputs.android_version }}-${{ github.event.inputs.kernel_version }}
          repo sync -j$(nproc) -c --no-tags --optimized-fetch --force-sync

      - name: Copy kerneldriver
        run: |
          cd ${{ env.KERNEL_DIR }}
          cp -r ../kerneldriver common/drivers

      - name: Modify Makefile
        run: |
          cd ${{ env.KERNEL_DIR }}
          echo "obj-y += kerneldriver/" >> common/drivers/Makefile

      - name: Add module to GKI modules list
        if: ${{ github.event.inputs.android_version > 13 }}
        run: |
          cd ${{ env.KERNEL_DIR }}
          MODULE_NAME="drivers/kerneldriver/${{ github.event.inputs.driver_name }}"
          
          awk -i inplace -v module="$MODULE_NAME" '
            BEGIN { added=0 }
            /_COMMON_GKI_MODULES_LIST = \[/ { in_list=1 }
            in_list && /\]/ {
              if (!added) {
                print "    \"" module "\","
                added=1
              }
              in_list=0
            }
            in_list && !added {
              if (module < $0) {
                print "    \"" module "\","
                added=1
              }
            }
            { print }
          ' common/modules.bzl
          
      - name: Prepare module list for legacy builds
        if: ${{ github.event.inputs.android_version <= 13 }}
        run: |
          cd ${{ env.KERNEL_DIR }}
          echo "drivers/kerneldriver/${{ github.event.inputs.driver_name }}" >> common/android/gki_aarch64_modules

      - name: Increase stack frame size limit
        run: |
          cd ${{ env.KERNEL_DIR }}
          find . -type f -name "Makefile*" -exec sed -i 's/-Wframe-larger-than=[0-9]*/-Wframe-larger-than=4096/g' {} +
          grep -q "FRAME_WARN" common/Makefile || echo 'KBUILD_CFLAGS += -Wframe-larger-than=4096' >> common/Makefile

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential flex bison libssl-dev libelf-dev bc python-is-python3

      - name: Build kernel module
        run: |
          cd ${{ env.KERNEL_DIR }}
          if [ ${{ github.event.inputs.android_version }} -le 12 ]; then
            # 首次编译全量，后续仅编译模块
            if [ "${{ steps.cache_check.outputs.cache_exists }}" = "true" ]; then
              BUILD_CONFIG=common/build.config.gki.${{ github.event.inputs.target_arch }} LTO=thin build/build.sh -j32 modules
            else
              BUILD_CONFIG=common/build.config.gki.${{ github.event.inputs.target_arch }} LTO=thin build/build.sh -j32
            fi
            OUTPUT_PATH="out/android${{ github.event.inputs.android_version }}-${{ github.event.inputs.kernel_version }}/dist"
            cd "$OUTPUT_PATH"
            rm -f Image \
              abi_symbollist \
              abi.xml \
              abi.prop \
              kernel-uapi-headers.tar.gz \
              kernel-headers.tar.gz \
              Image.lz4 \
              System.map \
              modules.builtin.modinfo \
              modules.builtin \
              vmlinux.symvers \
              test_mappings.zip \
              vmlinux          
          else
            echo "Using Bazel build system for Android ${{ github.event.inputs.android_version }}"
            # 首次编译全量，后续仅编译模块
            if [ "${{ steps.cache_check.outputs.cache_exists }}" = "true" ]; then
              tools/bazel run --local_cpu_resources=50 --local_ram_resources=6144 //common:kernel_${{ github.event.inputs.target_arch }}_modules
            else
              tools/bazel run --local_cpu_resources=50 --local_ram_resources=6144 //common:kernel_${{ github.event.inputs.target_arch }}_dist
            fi
            OUTPUT_PATH="out/kernel_${{ github.event.inputs.target_arch }}"
          fi
          echo "OUTPUT_PATH=$OUTPUT_PATH" >> $GITHUB_ENV
        continue-on-error: true
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: kernel-driver-${{ github.event.inputs.target_arch }}
          path: |
            ${{ env.KERNEL_DIR }}/${{ env.OUTPUT_PATH }}

      - name: Prepare build cache (first run only)
        if: steps.cache_check.outputs.cache_exists == 'false'
        run: |
          # 仅保留编译模块必需的文件（源码、配置、符号文件等）
          cd ${{ env.KERNEL_DIR }}
          # 清理冗余文件减小缓存体积
          rm -rf .repo/projects/*/.git .repo/project-objects/*/.git out/*.zip out/*.tar.gz
          # 压缩缓存文件
          cd ..
          tar -zcf ${{ env.CACHE_ARCHIVE }} -C ${{ env.KERNEL_DIR }} .

      - name: Upload build cache to repository
        if: steps.cache_check.outputs.cache_exists == 'false'
        run: |
          git config --global user.email "1917767839@qq.com"
          git config --global user.name "Miss"
          git add ${{ env.CACHE_ARCHIVE }}
          git commit -m "Add build cache for Android ${{ github.event.inputs.android_version }} kernel ${{ github.event.inputs.kernel_version }} ${{ github.event.inputs.target_arch }}"
          git push origin main
